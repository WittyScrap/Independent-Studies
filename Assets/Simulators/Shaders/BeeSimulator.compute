#pragma kernel CSSimulate
#pragma kernel CSDissipate


/** Structures */

//
//  Represents a single particle for the Particle Swarm Optimisation
//  based algorithm.
//
struct Particle
{
    float2 position;
    float2 velocity;
    float3 preference;
};

/** Data */

RWTexture2D<float3>             ParticleSpace;
RWStructuredBuffer<Particle>    Particles;

float CommsDistance;


/** Functions */ 


float random(in float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453123);
}

#define R (random(position) * 2.f)

void iterate(inout float2 velocity)
{
    velocity = 0;
}

void plot(in float2 where)
{
    const float partcileAdd = 0.005f;
    const int radius = 3;

    ParticleSpace[where] += partcileAdd * 2;

    for (int x = where.x - radius; x < where.x + radius; x += 1)
    {
        for (int y = where.y - radius; y < where.y + radius; y += 1)
        {
            ParticleSpace[int2(x, y)] += partcileAdd * (1 - (length(float2(x, y) - where) / (float)radius));
        }
    }
}

#undef R

/** Kernels */

// PSO kernel
// 
// Runs the Particle Swarm Optimisation algorithm.
[numthreads(32,32,1)]
void CSSimulate (uint3 id : SV_DispatchThreadID)
{
    // Gather particle data
    int x = id.x;
    int y = id.y;

    float2 position = Particles[x].position;
    float2 velocity = Particles[x].velocity;


    // Draw particle pixel
    plot(position);


    // Bee-inspired algorithm
    // iterate(velocity);
    // TODO

    
    // Advance by current velocity
    position += velocity;


    // Apply particle data
    Particles[x].position = position;
    Particles[x].velocity = velocity;
}

// Dissipation kernel
// 
// Dissipates the trails created by the particles during the main simulation.
[numthreads(32,32,1)]
void CSDissipate(uint3 id : SV_DispatchThreadID)
{
    ParticleSpace[id.xy] = 0;
}