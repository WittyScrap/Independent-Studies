#pragma kernel CSSimulate
#pragma kernel CSDissipate

#define CMP <

/** Structures */

//
//  Represents a single particle for the Particle Swarm Optimisation
//  based algorithm.
//
struct Particle
{
    float2 position;
    float2 velocity;
    float2 localBest;
    float2 globalBest;
};

/** Data */

RWTexture2D<float3>             ParticleSpace;
RWStructuredBuffer<Particle>    Particles;

int OutputWidth;
int OutputHeight;

float W;
float C1;
float C2;
float CommsDistance;


/** Functions */ 

#include "SolutionSpace.cginc"

float random(in float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453123);
}

#define R (random(position) * 2.f)

void iterate(inout float2 velocity, in float2 localBest, in float2 position, in float2 globalBest)
{
    velocity = velocity * W + (localBest - position) * C1 * R + (globalBest - position) * C2 * R;
}

#undef R

void plot(in float2 where)
{
    const float partcileAdd = 0.003f;
    const int radius = 5;

    ParticleSpace[where] += partcileAdd * 2;

    for (int x = where.x - radius; x < where.x + radius; x += 1)
    {
        for (int y = where.y - radius; y < where.y + radius; y += 1)
        {
            ParticleSpace[int2(x, y)] += partcileAdd * (1 - (length(float2(x, y) - where) / (float)radius));
        }
    }
}

float2 iIf(bool _condition, float2 _true, float2 _false)
{
    return (_condition * _true) + (!_condition * _false);
}

/** Kernels */

// PSO kernel
// 
// Runs the Particle Swarm Optimisation algorithm.
[numthreads(32,32,1)]
void CSSimulate (uint3 id : SV_DispatchThreadID)
{
    // Gather particle data
    int x = id.x;
    int y = id.y;

    float2 position = Particles[x].position;
    float2 velocity = Particles[x].velocity;

    float2 screen = float2(OutputWidth, OutputHeight);


    // Draw particle pixel
    plot(position);


    // Modified PSO simulation
    float prevValue = fnSolutionSpace(Particles[x].localBest, screen);
    float bestValue = fnSolutionSpace(Particles[x].globalBest, screen);
    float currValue = fnSolutionSpace(position, screen);

    Particles[x].localBest = iIf(currValue CMP prevValue, position, Particles[x].localBest);
    Particles[x].globalBest = iIf(currValue CMP bestValue, position, Particles[x].globalBest);

    float2 commsGlobalBest = Particles[y].globalBest + float2 // Add a random error amount
    (
        random(float2(Particles[x].position.x, Particles[y].position.y)) * 2.f - 1,
        random(float2(Particles[y].position.y, Particles[x].position.x)) * 2.f - 1
    );

    if (length(Particles[y].position - position) < CommsDistance &&
        fnSolutionSpace(commsGlobalBest, screen) CMP fnSolutionSpace(Particles[x].globalBest, screen))
    { 
        Particles[x].globalBest = commsGlobalBest;
    }
 
    iterate(velocity, Particles[x].localBest, position, Particles[x].globalBest);

    
    // Advance by current velocity
    position += velocity;


    // Apply particle data
    Particles[x].position = position;
    Particles[x].velocity = velocity;
}

// Dissipation kernel
// 
// Dissipates the trails created by the particles during the main simulation.
[numthreads(32,32,1)]
void CSDissipate(uint3 id : SV_DispatchThreadID)
{
    ParticleSpace[id.xy] = 0;
}