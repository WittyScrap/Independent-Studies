#pragma kernel CSSimulate
#pragma kernel CSDissipate


/** Structures */

//
//  Represents a single particle for the Particle Swarm Optimisation
//  based algorithm.
//
struct Particle
{
    float2 position;
    float2 velocity;
};


/** Data */

RWTexture2D<float>              ParticleSpace;
RWStructuredBuffer<Particle>    Particles;

int                             OutputWidth;
int                             OutputHeight;


/** Functions */

// Solution space function
float fnSolutionSpace (const float2 v)
{
	float x = v.x;
	float y = v.y;

	x = ((x / OutputWidth) * 2 - 1) * 3;
	y = ((y / OutputHeight) * 2 - 1) * 3;

	return cos(x * y) + sin(x * y);
}


/** Kernels */

// PSO kernel
// 
// Runs the Particle Swarm Optimisation algorithm.
[numthreads(1024,1,1)]
void CSSimulate (uint3 id : SV_DispatchThreadID)
{
    // TODO: Modified PSO simulation
    float2 position = Particles[id.x].position;
    float2 velocity = Particles[id.x].velocity;

    if (position.x < 0 || position.x > OutputWidth)
    {
        velocity.x *= -1;
    }

    if (position.y < 0 || position.y > OutputHeight)
    {
        velocity.y *= -1;
    }

    
    // Advance by current velocity
    position += velocity;
    

    // Apply particle data
    Particles[id.x].position = position;
    Particles[id.x].velocity = velocity;


    // Draw particle pixel
    ParticleSpace[position] = 1.f;
}

// Dissipation kernel
// 
// Dissipates the trails created by the particles during the main simulation.
[numthreads(32,32,1)]
void CSDissipate(uint3 id : SV_DispatchThreadID)
{
    ParticleSpace[id.xy] *= .95f;
}